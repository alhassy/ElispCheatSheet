# f7 preview changes
# (local-set-key (kbd "<f7>") (lambda () (interactive) (async-shell-command (concat "open " (org-latex-export-to-pdf)))))

# f8 commit each change
# f9 push changes

* Header                                                     :ignore:
#+TITLE: Elisp Reference Sheet
# SUBTITLE: Cheat Sheet Template
# DATE: << Winter 2019 >>
# When we don't provide a date, one is provided for us.
#+MACRO: URL https://github.com/alhassy/ElispCheatSheet
#+MACRO: ShowURL @@latex:{\tiny\hspace{6em}\url{ {{{URL}}} } }@@
#+AUTHOR: [[http://www.cas.mcmaster.ca/~alhassm/][Musa Al-hassy]] {{{ShowURL}}}
#+EMAIL: alhassy@gmail.com
#+DESCRIPTION: This document is written by Musa Al-hassy for his learning in the Winter of 2019.
#+STARTUP: hideblocks
#+STARTUP: overview
#+TODO: | spacing
#+OPTIONS: d:nil
#+INCLUDE: CheatSheet/CheatSheetSetup.org

* LaTeX Setup                                                :ignore:
# Can be obtained from: https://github.com/alhassy/MyUnicodeSymbols
#
#+LATEX_HEADER: \usepackage{/Users/musa/MyUnicodeSymbols/MyUnicodeSymbols}

#+NAME: parallel enviro
#+BEGIN_EXPORT latex 
% \setlength{\columnseprule}{2pt}

\renewenvironment{parallel}[1][2] % one argument, whose default value is literal `2`.
 {
  \setlength{\columnseprule}{2pt}
  \begin{minipage}[t]{\linewidth} % width of minipage is 100% times of \linewidth
  \begin{multicols}{#1}  % default is `2`
 }
 {
 \setlength{\columnseprule}{0pt}
  \end{multicols}
  \end{minipage}
 }
#+END_EXPORT

* Intro :ignore:
/Everything is a list!/

- To find out more about ~name~ execute ~(describe-symbol 'name)~!
  * After the closing parens invoke ~C-x C-e~ to evaluate.
- To find out more about a key press, execute ~C-h k~ then the key press.
- To find out more about the current mode you're in, execute ~C-h m~ or
  ~describe-mode~. Essentially a comprehensive yet terse reference is provided.
:Examples:
(describe-symbol 'just-one-space)
(describe-symbol 'eldoc-mode)
(describe-symbol 'describe-symbol)
:End:

* Functions

+ Function invocation: ~(f x₀ x₁ … xₙ)~. E.g., ~(+ 3 4)~ or ~(message "hello")~.
  - After the closing parens invoke ~C-x C-e~ to execute them.
  - /Warning!/ Arguments are evaluated *before* the function is executed.
  - Only prefix invocations means we can use ~-,+,*~ in /names/
    since ~(f+*- a b)~ is parsed as applying function ~f+*-~ to arguments ~a, b~.
    # Having infix notation, as in “a - b”, is what renders names “a-b”
    # from being parsed correctly. Lisp does not make use of infix names,
    # so this is a non-issue. Interestingly Agda allows +-* in names and infix!

    E.g., ~(1+ 42) → 43~ using function /named/ ~1+~ --the ‘successor function’.

+ Function definition:
  #+BEGIN_SRC elisp
  ;; “de”fine “fun”ctions
  (defun my-fun (arg₀ arg₁ … argₖ)         ;; header, signature
    "This functions performs task …"       ;; documentation, optional
    …sequence of instructions to perform…  ;; body
  )
  #+END_SRC

  - The return value of the function is the result of the last expression executed. 
  - The documentation string may indicate the return type, among other things.  

+ Anonymous functions: ~(lambda (arg₀ … argₖ) bodyHere)~.
  #+BEGIN_SRC elisp
;; make and immediately invoke
((lambda (x y) (message (format "x, y ≈ %s, %s" x y))) 1 2)

;; make then way later invoke
(setq my-func (lambda (x y) (message (format "x, y ≈ %s, %s" x y))))
(funcall my-func 1 2)
;; (my-func 1 2) ;; invalid!
#+END_SRC
  The last one is invalid since ~(f x0 … xk)~ is only meaningful for functions
  ~f~ formed using ~defun~. More honestly, Elisp has distinct namespaces for functions and variables.

  Indeed, ~(defun f (x₀ … xₖ) body) ≈ (fset 'f (lambda (x₀ … xₖ) body))~.
  - Using ~fset~, with quoted name, does not require using ~funcall~.

+ Recursion and IO:
   ~(defun sum (n) (if (<= n 0) 0 (+ n (sum (- n 1)))))~
  - Now ~(sum 100) → 5050~.

+ IO: ~(defun make-sum (n) (interactive "n") (message-box (format "%s" (sum n))))~
  - The ~interactive~ option means the value of ~n~ is queried to the user; e.g.,
    enter 100 after executing ~(execute-extended-command "" "make-sum")~
    or ~M-x make-sum~.
  - In general ~interactive~ may take no arguments.
    The benefit is that the function can be executed using ~M-x~,
    and is then referred to as an interactive function.

* COMMENT TODO optional arguments

#+BEGIN_SRC emacs-lisp
;; Unsupplied optional arguments are bound to ‘nil’.
(cl-defun f (a b &optional c (d 5))
   (format "a: %s, b: %s, c: %s, d: %s" a b c d)
)

;; (f 0 1) ⇒ "a: 0, b: 1, c: nil, d: 5"
;; (f 0 1 'nice) ⇒ "a: 0, b: 1, c: nice, d: 5"
;; (f 0 1 'nice 'woah) ⇒ "a: 0, b: 1, c: nice, d: woah"
#+END_SRC


* spacing newpage                                                    :ignore:
\newpage
* Variables
# (describe-symbol 'make-variable-buffer-local)

+ Global Variables, Create & Update: ~(setq name value)~.
  - Generally: ~(setq name₀ value₀ ⋯ nameₖ valueₖ)~.
  
  Use ~devfar~ for global variables since it
  permits a documentation string --but updates must be performed with ~setq.
  E.g., ~(defvar my-x 14 "my cool thing")~.

  :TryItOut:
(defvar my-x 14 "my cool thing")

my-x ;; ⇒ 14

(defvar my-x 16 "my cool thing")

my-x ;; ⇒ 14 still

(setq my-x 16)
my-x ;; ⇒ now 16

(describe-symbol 'my-x)


  :End:

  :WhatAboutSet:
  (setq x y) ≈ (set (quote x) y)

  Variables are assigned with ~set~, which takes a quoted identifier, so that it's not evaluated,
  and a value to associate to that variable. “set quoted”, ~setq~, avoids the hassle of quoting the name.

  Of course functions evaluate their arguments, so ~setq~ couldn't possibly be a function.
  It's an uber-function, called a ‘macro’, that doesn't evaluate its arguments before executing.
  :End:

+ Local Scope: ~(let ((name₀ val₀) … (nameₖ valₖ)) bodyBlock)~.
  - ~let*~ permits later bindings to refer to earlier ones.
  - The simpler ~let~ indicates to the reader that there are no dependencies between the variables.
   # let ≈ parallel; let* ≈ sequential. 

+ Any sequence of symbols is a valid identifier, including ~x, x-y/z, --<<==>>--~
  and even ~∀∃~. Elisp names are case sensitive.
  :Try_it_out:
#+BEGIN_SRC emacs-lisp
(setq ∀∃ 23)
(message (format "%s" ∀∃))

(setq --<<==>>-- 23)
(message (format "%s" --<<==>>--))

(eq '∀∃ '--<<==>>--) ;; false 
(eq '∀∃ '∀∃)         ;; true

;; Elisp names are case sensitive 
(eq 'foobar 'fOoBaR) ;; ⇒ false
#+END_SRC
:End:
  
+ Elisp is dynamically scoped: The caller's stack is accessible by default!
  #+BEGIN_SRC emacs-lisp
(defun woah () 
  "If any caller has a local ‘work’, they're in for a nasty bug
   from me! Moreover, they better have ‘a’ defined in scope!"
  (setq work (* a 111))) ;; Benefit: Variable-based scoped configuration.

(defun add-one (x)
  "Just adding one to input, innocently calling library method ‘woah’."
  (let ((work (+ 1 x)) (a 6))
    (woah) ;; May change ‘work’ or access ‘a’!
    work
  )
)

;; (add-one 2) ⇒ 666
#+END_SRC

Useful for loops, among other things:
| _C_      | _Elisp_      |
| ~x += y~ | ~(incf x y)~ |
| ~x--~    | ~(decf x)~   |
| ~x++~    | ~(incf x)~   |

* Quotes, Quasi-Quotes, and Unquotes

+ Quotes: ~'x~ refers to the /name/ rather than the /value/ of ~x~.
  - This is superficially similar to pointers:
    Given ~int *x = …~, ~x~ is the name (address)
    whereas ~*x~ is the value.
  - The quote simply forbids evaluation; it means /take it literally as you see it/
    rather than looking up the definition and evaluating.
    :TryItOut:
    #+BEGIN_SRC elisp
(setq this 'hello)
(setq that this)

;;  this  → hello
;; 'this  → this
;;  that  → hello
;; 'that  → that
#+END_SRC 
    :End:
  - Note: ~'x ≈ (quote x)~.

  Akin to English, quoting a word refers to the word and not what it denotes.

  ( This lets us treat /code/ as /data/! E.g., ~'(+ 1 2)~ evaluates to ~(+ 1 2)~, a function call,
    not the value ~3~! Another example, ~*~ is code but ~'*~
    is data, and so ~(funcall '* 2 4)~ yields 8. )

+ /Atoms/ are the simplest objects in Elisp: They evaluate to themselves.
  - E.g., ~5, "a", 2.78, 'hello~, lambda's form function literals in that, e.g.,
    ~(lambda (x) x)~ evaluates to itself.

\room

/Elisp expressions are either atoms or function application --nothing else!/

\room

An English sentence is a list of words; if we want to make a sentence where some of
the words are parameters, then we use a quasi-quote --it's like a quote, but allows
us to evaluate data if we prefix it with a comma. It's usually the case that the
quasi-quoted sentence happens to be a function call! In which case, we use ~eval~
which executes code that is in data form; i.e., is quoted.

\room
Macros are essentially functions that return sentences, lists, which may happen to
contain code.

# :Try_it_out:
#+BEGIN_SRC emacs-lisp
'(I am a sentence)   ;; quote 
'(+ 1 (+ 1 1))       ;; another sentence; data

(setq name "Musa")
`(Hello ,name It is a pleasure to meet you) ;; Quasi-quote
`(+ 1 ,(+ 1 1))             ;; sentence with a computation, code, in it

'(+ 1 2)        ;; ⇒ '(+ 1 2)
(eval '(+ 1 2)) ;; ⇒ 3
#+END_SRC
# :End:

As the final example shows, Lisp treats data and code interchangeably.
A language that uses the same structure to store data and code is called ‘homoiconic’.

* Printing

  Lisp makes writing a REPL astonishingly easy: “Loop as follows: Print the result
  of evaluating what is read at the prompt.”
#+BEGIN_SRC emacs-lisp
  (loop (print (eval (read))))  ;; Beautiful (•̀ᴗ•́)و

  (defun my-safe-repl () ;; Run repl until user types “quit”.
   (let ((cmd (read)))
     (unless (equal cmd 'quit)
       (print (eval cmd))
       (my-safe-repl))
   ))
#+END_SRC

 + ~loop~ merely loops forever.
   
* spacing newpage                                                    :ignore:
\newpage
* Block of Code

Use the ~progn~ function to treat multiple expressions as a single expression. E.g.,
#+BEGIN_SRC elisp
(progn
  (message "hello")
  (setq x  (if (< 2 3) 'two-less-than-3))
  (sleep-for 0 500)
  (message (format "%s" x))
  (sleep-for 0 500)
  23    ;; Explicit return value
)
#+END_SRC
This' like curly-braces in C or Java. The difference is that the last expression is considered
the ‘return value’ of the block.

Herein, a ‘block’ is a number of sequential expressions which needn't be wrapped with a ~progn~ form.

+ Lazy conjunction and disjunction:
  - Perform multiple statements but stop when any of them fails, returns ~nil~: ~(and s₀ s₁ … sₖ)~.
    * Maybe monad!
  - Perform multiple statements until one of them succeeds, returns non-~nil~: ~(or s₀ s₁ … sₖ)~.
  
  We can coerce a statement ~sᵢ~ to returning non-~nil~ as so: (~progn sᵢ t)~.
  Likewise, coerce failure by ~(progn sᵢ nil)~.
  
:TryItOut:
#+BEGIN_SRC emacs-lisp
(and 
  (message "hello")
  (progn (sleep-for 0 500) t)
  (message "world")
  (progn (sleep-for 0 500) t)  
  nil
  (message "bye")
)

(or
  (message "hello")
  (progn (sleep-for 0 500) t)
  (message "world")
  (progn (sleep-for 0 500) t)  
  nil
  (message "bye")
)

(catch 'failure
  (cond (message "hello")
    (progn (sleep-for 0 500) t)
    (message "world")
    (progn (sleep-for 0 500) t)  
    nil
    (throw 'failure 99)
    (message "bye")  
  ) 
)
#+END_SRC

:End:

+ Jumps, Control-flow transfer: Perform multiple statements and decide when and where you would like to stop. This' akin to C's ~goto~'s; declare a label with ~catch~ and goto it with ~throw~.
  - ~(catch 'my-jump bodyBlock)~ where the body may contain ~(throw 'my-jump returnValue)~;
  the value of the catch/throw is then ~returnValue~.
  - Useful for when the ~bodyBlock~ is, say, a loop.
    Then we may have multiple ~catch~'s with different labels according to the nesting of loops.
    * Possibly informatively named throw symbol is ~'break~.
  - Using name ~'continue~ for the throw symbol and having such a catch/throw as /the body of a loop/
    gives the impression of continue-statements from Java.
  - Using name ~'return~ for the throw symbol and having such a catch/throw as the body of a function
    definition gives the impression of, possibly multiple, return-statements from Java
    --as well as ‘early exits’.
  - Simple law: ~(catch 'it s₀ s₁ … sₖ (throw 'it r) sₖ₊₁ ⋯ sₖ₊ₙ) ≈ (progn s₀ s₁ ⋯ sₖ r)~.
    * Provided the ~sᵢ~ are simple function application forms.

+ ~and, or~ can be thought of as instance of catch/throw, whence they are control flow
  first and Boolean operations second.
    #+BEGIN_SRC emacs-lisp
  (and s₀ ⋯ sₙ e)  ⇒  when all xᵢ are true, do e
  (or  s₀ ⋯ sₙ e)  ⇒  when no xᵢ is true, do e
#+END_SRC

* List Manipulation

+ Produce a syntactic, un-evaluated list, we use the single quote:
  ~'(1 2 3)~.

+ Construction: ~(cons 'x₀ '(x₁ … xₖ)) → (x₀ x₁ … xₖ)~.
+ Head, or /contents of the address part of the register/:
   ~(car '(x₀ x₁ … xₖ)) → x₀~.
+ Tail, or /contents of the decrement part of the register/:
   ~(cdr '(x₀ x₁ … xₖ)) → (x₁ … xₖ)~.
+ Deletion: ~(delete e xs)~ yields ~xs~ with all instance of ~e~ removed.
  - E.g., ~(delete 1 '(2 1 3 4 1)) → '(2 3 4)~.

E.g., ~(cons 1 (cons "a" (cons 'nice nil))) ≈ (list 1 "a" 'nice) ≈ '(1 "a" nice)~.

\room
Since variables refer to literals and functions have lambdas as literals, we 
can produce forms that take functions as arguments. E.g., the standard ~mapcar~
may be construed:
#+BEGIN_SRC emacs-lisp
(defun my-mapcar (f xs)
  (if (null xs) xs
   (cons (funcall f (car xs)) (my-mapcar f (cdr xs)))
  )
)

(my-mapcar (lambda (x) (* 2 x)) '(0 1 2 3 4 5)) ;; ⇒ (0 2 4 6 8 10)
(my-mapcar 'upcase '("a" "b" "cat")) ;; ⇒ ("A" "B" "CAT")

(describe-symbol 'remove-if-not) ;; “filter” ;-)
#+END_SRC

* Conditionals

+ Booleans: ~nil~, the empty list ~()~, is considered /false/, all else
  is /true/. 
  - Note: ~nil ≈ () ≈ '() ≈ 'nil~.
  - (Deep structural) equality: ~(equal x y)~.
  - Comparisons: As expected; e.g., ~(<= x y)~ denotes /x ≤ y/.

+ ~(if condition thenExpr optionalElseBlock)~
  - Note: ~(if x y) ≈ (if x y nil)~; better: ~(when c thenBlock) ≈ (if c (progn thenBlock))~.
  - Note the else-clause is a ‘block’: Everything after the then-clause is considered to be part of it.  
  - ~(if xs ⋯)~ means “if xs is nonempty then ⋯” is akin to C style idioms on
    linked lists.
    
+ Avoid nested if-then-else clauses by using a ~cond~ statement --a (lazy) generalisation of switch statements.  
   #+BEGIN_SRC emacs-lisp
(cond
  (test₀
    actionBlock₀)
  (test₁
    actionBlock₁)
  …
  (t                       ;; optional
    defaultActionBlock))
#+END_SRC
   Sequentially evaluate the predicates ~testᵢ~ and perform only the action of the first true test;
   yield ~nil~ when no tests are true.

+ Make choices by comparing against /only/ numbers or symbols --e.g., not strings!-- with less clutter by using ~case~:
   #+BEGIN_SRC emacs-lisp
(case 'boberto
  ('bob 3)
  ('rob 9)
  ('bobert 9001)
  (otherwise "You're a stranger!"))
#+END_SRC
   With case you can use either ~t~ or ~otherwise~ for the default case, but it must come last.

:Try_it_out:   
#+BEGIN_SRC emacs-lisp
(cond
  (t (message "first"))
  ((/ 2 0) (message "crash"))
)
#+END_SRC
:End:

Hint: If you write a predicate, think of what else you can return besides ~t~; such as
a witness to why you're returning truth --all non-nil values denote true after all.
E.g., ~(member e xs)~ returns the sublist of ~xs~ that begins with ~e~.
# Return more than just the truth!

:Try_it_out:
#+BEGIN_SRC emacs-lisp
(member 1 '(2 1 3 5))
#+END_SRC
:End:

* spacing vfill                                                     :ignore:
\vfill

* Exception Handling

We can attempt a dangerous clause and catch a possible exceptional case
--below we do not do so via ~nil~-- for which we have an associated handler.
# Which handles how to recover from such exceptional circumstances.
#+BEGIN_SRC elisp
(condition-case nil attemptClause (error recoveryBody))

  (ignore-errors attemptBody) 
≈ (condition-case nil (progn attemptBody) (error nil))

(ignore-errors (+ 1 "nope")) ;; ⇒ nil
#+END_SRC

* Loops

Sum the first ~10~ numbers:
#+BEGIN_SRC elisp
(let ((n 100) (i 0) (sum 0))
  (while (<= i n)
    (setq sum (+ sum i))
    (setq i   (+ i   1))
  )
  (message (number-to-string sum))
)
#+END_SRC

Essentially a for-loop:
#+BEGIN_SRC elisp
(dotimes (x   ;; refers to current iteration, initally 0
          n   ;; total number of iterations
	  ret ;; optional: return value of the loop
	 )
  …body here, maybe mentioning x…  	 
)

;; E.g., sum of first n numbers
(let ((sum 0) (n 100))
  (dotimes (i (1+ n) sum) (setq sum (+ sum i))))
#+END_SRC

A for-each loop: Iterate through a list.
Like ~dotimes~, the final item is the expression value at the end of the loop.
#+BEGIN_SRC elisp
(dolist (elem '("a" 23 'woah-there) nil)
  (message (format "%s" elem))
  (sleep-for 0 500)
)
#+END_SRC

~(describe-symbol 'sleep-for)~ ;-)

\newpage
*Example of Above Constructs*
#+BEGIN_SRC emacs-lisp
(defun my/cool-function (N D)
  "Sum the numbers 0..N that are not divisible by D"
  (catch 'return
    (when (< N 0) (throw 'return 0)) ;; early exit
    (let ((counter 0) (sum 0))
      (catch 'break
        (while 'true
          (catch 'continue
            (incf counter)
            (cond
              ((equal counter N)     (throw 'break sum))
              ((zerop (% counter D)) (throw 'continue nil))
    	      ('otherwise            (incf sum counter))
              )))))))

(my/cool-function  100 3)  ;; ⇒ 3267
(my/cool-function  100 5)  ;; ⇒ 4000
(my/cool-function -100 7)  ;; ⇒ 0
#+END_SRC

Note that we could have had a final redundant ~throw 'return~:
Redundant since the final expression in a block is its return value.

\room

The special ~loop~ constructs provide immensely many options to form
nearly any kind of imperative loop. E.g., Python-style ‘downfrom’ for-loops
and Java do-while loops. I personally prefer functional programming, so wont
look into this much.

* Records

#+BEGIN_SRC elisp
(defstruct X "Record with fields fᵢ having defaults dᵢ" 
  (f₀ d₀) ⋯ (fₖ dₖ))

;; Automatic constructor is “make-X” with keyword parameters for 
;; initialising any subset of the fields!
;; Hence (expt 2 (1+ k)) kinds of possible constructor combinations!
(make-X :f₀ val₀ :f₁ val₁ ⋯ :fₖ valₖ) ;; Any, or all, fᵢ may be omitted

;; Automatic runtime predicate for the new type.
(X-p (make-X)) ;; ⇒ true
(X-p 'nope)    ;; ⇒ nil

;; Field accessors “X-fᵢ” take an X record and yield its value.

;; Field update: (setf (X-fᵢ x) valᵢ)

(defstruct book
  title  (year  0))

(setq ladm (make-book :title "Logical Approach to Discrete Math" :year 1993))
(book-title ladm) ;; ⇒ "Logical Approach to Discrete Math"
(setf (book-title ladm) "LADM")
(book-title ladm) ;; ⇒ "LADM"
#+END_SRC

* Macros

  Macros let us add new syntax, like ~let1~ for single lets:
  #
  # Need to have a space before using ‘parallel’.
  #
  #+begin_parallel org
     #+BEGIN_SRC emacs-lisp
 ;; Noisy parens!
 (let ((x "5")) (message x))

 ;; Better.
 (let1 x "5" (message x))

 ;; How?
 (defmacro let1 (var val &rest body)
  `(let ((,var ,val)) ,@body))

 ;; What does it look like?
 (macroexpand
   '(let1 x "5" (message x)))
 ;; ⇒ (let ((x 5)) (message x))
 #+END_SRC
   \columnbreak   
     #+BEGIN_SRC emacs-lisp
 ;; No progn; (first x y z) ≈ x    
 (defmacro first (&rest body)
  (car `,@body))

 ;; Need to use “progn”!
 (defmacro not-first (&rest body)
  `(progn ,@(cdr `,@body)))

 (macroexpand '(not-first x y z))
 ;; `,@body       ⇒ (x y z)
 ;; (cdr `,@body) ⇒ (y z)
 ;; `(progn ,@(cdr `,@body))
 ;;        ⇒ (progn y z)
#+END_SRC

  :Try_it_out:
  #+BEGIN_SRC emacs-lisp
  (first (insert "x") (insert "y") (message "z"))
    
  (not-first (insert "x") (insert "y") (message "z"))
#+END_SRC
  :End:

  #+end_parallel
  
  0. Certain problems are elegantly solved specific language constructs;
     e.g., list operations are generally best defined by pattern matching.
     # Likewise for any ADT.

  1. Macros let us /make/ the best way to solve a problem when our language does
     not give it to us.
     
     # --They can also be used to reduce repetitive visual noise.
     # Which is achievable by using higher-order operations.
     #
     # IMHO macros are best for creating new syntax.

  2.  Macro expansion happens before runtime, function execution, and so the
      arguments passed to a macro will contain raw source code.

      [[http://www.lispworks.com/documentation/HyperSpec/Body/02_df.htm][Backquotes]] let us use the comma to cause the actual variable /names/
      and /values/ to be used --e.g., ~x~ is a ‘meta-variable’ and its value, ~,x~,
      refers to a real variable or value.

      The ~&rest~ marker allows us to have multiple statements at the end of the macro:
      The macro expander provides all remaining expressions in the macro as a list,
      the contents of which may be inserted in place, not as a list, using the
      [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html][ ~,@~ splice comma]]  --we need to ensure there's a ~progn~.

       # Use list elements in-place:
        ~`(pre ,@(list s₀ ⋯ sₙ) post) ≈ `(pre s₀ ⋯ sₙ post)~.
       #
       # This works:  `(pre ,@'(s0 ⋯ sn) post)
       #             ≈ '(pre s0 ⋯ sn post)
       #
       # Woah!
  
+ ~macroexpand~ takes /code/ and expands any macros in it. It's useful in debugging macros.
  
  #  \room
  The above ‘equations’ can be checked by running ~macroexpand~; \newline e.g.,
  ~(when c s₀ ⋯ sₙ) ≈ (if c (progn s₀ ⋯ sₙ) nil)~ holds since:

   #+BEGIN_SRC elisp
(macroexpand '(when c s₀ ⋯ sₙ)) ;; ⇒ (if c (progn s₀ ⋯ sₙ))
#+END_SRC
    
+ If ~var~ is an argument to a macro where ~,var~ occurs multiple times, then since
  arguments to macros are raw source code, each occurrence of ~,var~ is an execution of the
  code referenced by ~var~.

  \room
  Avoid such repeated execution by using a ~let~ to capture the result, call it ~res~, once
  and use the ~res~ in each use site.

  \room
  Now we've made use of the name ~res~ and our users cannot use that name correctly.
  Avoid such /unintended/ capture by using ~gensym~ to provide us with a globally unique
  name which is bound to a variable, say ~r~, then we bind the result of executing ~var~
  to the fresh name ~,r~.

  \room  
  Whence: ~`(⋯,var⋯,var⋯)~
    @@latex:\newline{\color{white}.}\hspace{2em}@@
    ~⇒ (let ((r (gensym))) `(let ((,r ,var)) ⋯,r⋯,r⋯))~.

  \room  
  Note that the name ~r~ is outside the backquote; it is part of code that is run
  at macro expansion time, not runtime. The value of the final ~let~ is then the backquoted
  matter, which makes /no/ reference to ~r~, but instead makes use of the name it
  refers to, ~,r~. Neato!

  \room
  Ex., remove repeated execution from ~(defmacro twice (var) `(list ,var ,var))~.
  :Try_it_out:
  #+BEGIN_SRC emacs-lisp
(defmacro twice (var)
  `(list ,var ,var))

(macroexpand '(twice x))

(twice 3)
(twice (progn (insert "\nwow") 3))

(defmacro duplicate (var)
  (let1 r (gensym)
    `(let1 ,r ,var
       (list ,r ,r)
    )
  )
)

(duplicate 3)
(duplicate (progn (insert "\nwow") 3))
#+END_SRC
  :End:

+ Test that you don't have accidentally variable capture by passing in an insert
   statement and see how many times insertions are made.

+ Macros that /intentionally/ use variable capture as a feature, rather than a bug,
  to provide names available in the macro body are called ‘anaphoric macros’.

  \room  
  E.g., ~(split list no yes)~ provides the names ~head, tail~ in the ~yes~ body
  to refer to the head and tail of the given ~list~, say via a ~let~, but not so in the
  ~no~ argument for when ~list~ is empty. Whence, elegant pattern matching on lists.

  \room Exercise: Define ~split~.
  :Try_it_out:
#+BEGIN_SRC emacs-lisp
(defmacro split (list no &rest yes)
  `(if ,list (let ((head (car ,list)) (tail (cdr ,list))) ,@yes) ,no)
)

;; Example use

(defun sum (xs) (split xs 0 (+ head (sum tail))))

(sum '(1 2 3 4 5)) ;; ⇒ 15
#+END_SRC
:End:

* COMMENT Macros :old_notes:
+ Sometimes we don't want eager evaluation; i.e., we do not want to
  recursively evaluate arguments before running a function.
+ /Macros/ let us manipulate a program's abstract syntax tree, usually
  by delaying some computations --easy since Elisp lets us treat code as data.

\room
~`(e₀ e₁ ⋯ eₖ)~ is known as a /quasi-quote/: It produces syntactic data like ~quote~
  but allows computations to occur --any expression prefixed with a comma as in ~,e₃~--
  thereby eagerly evaluating some and delaying evaluation of others.

#+BEGIN_SRC elisp
(defun my/lazy-or (this that)
  (if this t that))

(my/lazy-or (print "yup") (print "nope")) ;; evaluates & prints both clauses!
(my/lazy-or t (/ 2 0)) ;; second clause runs needlessly, causing an error.

;; Delay argument evaluation using defmacro
(defmacro my/lazy-or-2 (this that)
  `(if ,this t ,that))

(my/lazy-or-2 (print "yup") (print "nope")) ;; just "yup" ;-)
(my/lazy-or-2 t (/ 2 0)) ;; second clause not evaluated

;; What code is generated by our macro?
(macroexpand '(my/lazy-or-2 t (/ 2 0))) ;; ⇒ (if t t (/2 0))
#+END_SRC

We've added new syntax to Elisp!

\room
The above ‘equations’ can be checked by running ~macroexpand~; \newline e.g.,
~(when c s₀ ⋯ sₙ) ≈ (if c (progn s₀ ⋯ sₙ) nil)~ holds since

#+BEGIN_SRC elisp
(macroexpand '(when c s₀ ⋯ sₙ)) ;; ⇒ (if c (progn s₀ ⋯ sₙ))
#+END_SRC

Woah!

* spacing COMMENT newpage                                                    :ignore:
\newpage
* COMMENT Hooks
+ We can ‘hook’ methods to run at particular events.
+ Hooks are lists of functions that are, for example, run when a mode is initialised.

# Hooks are lists of functions that are called from Emacs Lisp in order to modify the behaviour of something. 
# For example, different modes have their own hooks so that you can add functions that will run when that mode is initialised.

E.g.,
let's add the ~go~ function to the list of functions when a buffer 
is initialised with org-mode.
#+BEGIN_SRC elisp
(describe-symbol 'org-mode-hook)

(defun go () (message-box "It worked!"))

  (add-hook 'org-mode-hook 'go)
≈ (add-hook 'org-mode-hook '(lambda () (message-box "It worked!")))
≈ (add-to-list 'org-mode-hook 'go)

;; Now execute: (revert-buffer) to observe “go” being executed.
;; Later remove this silly function from the list:
(remove-hook 'org-mode-hook 'go)
#+END_SRC

+ The ~'after-init-hook~ event will run functions after the rest of the init-file has finished loading.

* spacing vfill                                                     :ignore:
\vfill

* Reads

+ [[http://sachachua.com/blog/wp-content/uploads/2013/05/How-to-Learn-Emacs-v2-Large.png][How to Learn Emacs: A Hand-drawn One-pager for Beginners / A visual tutorial]]
+ [[https://emacs-doctor.com/learn-emacs-lisp-in-15-minutes.html][Learn Emacs Lisp in 15 minutes]] --- https://learnxinyminutes.com/
+ [[https://www.gnu.org/software/emacs/manual/html_node/eintr/index.html#Top][An Introduction to Programming in Emacs Lisp]]  
+ [[https://www.gnu.org/software/emacs/manual/html_node/elisp/index.html#Top][GNU Emacs Lisp Reference Manual]]
+ [[http://landoflisp.com/][Land of Lisp]]
  
* COMMENT Making README.md

C-c C-c: Evaluate src block.

#+NAME: make-readme
#+BEGIN_SRC elisp :results none
(with-temp-buffer
    (insert 
    "#+EXPORT_FILE_NAME: README.md
     #+HTML: <h1> ElispCheatSheet </h1>
     #+OPTIONS: toc:nil d:nil
     # Toc is displayed below at a strategic position.

     Quick reference to the core language of Emacs ---Editor MACroS.
     
     ( Much Emacs Lisp was utilised in making my blog
     https://alhassy.github.io )

     *The listing sheet, as PDF, can be found
     [here]({{{URL}}}/blob/master/CheatSheet.pdf)*, 
     while below is an unruly html rendition.
 
     This reference sheet is built around the system
     https://github.com/alhassy/CheatSheet.

     #+TOC: headlines 2
     #+INCLUDE: CheatSheet.org     
    ")
    ;; (set-visited-file-name "ReadIt2.md")
    (org-mode)
    (org-md-export-to-markdown)
)
#+END_SRC

* COMMENT footer

# Local Variables:
# eval: (org-babel-tangle)
# eval: (progn (org-babel-goto-named-src-block "make-readme") (org-babel-execute-src-block) (outline-hide-sublevels 1))
# eval: (org-babel-load-file "CheatSheet/CheatSheet.org")
# compile-command: (my-org-latex-export-to-pdf)
# End:
